AWSTemplateFormatVersion: '2010-09-09'
Description: 'Splunk deployment with indexer, search head clustering and cluster master. QS(5030)'
Parameters:
  WebClientLocation:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'Must be a valid IP range in x.x.x.x/x notation.  Use 0.0.0.0/0 for no restrictions.'
    Description: 'The IP address range that is allowed to connect to the Splunk web interface. Note: a value of 0.0.0.0/0 will allow access from ANY ip address'
    MaxLength: '19'
    MinLength: '9'
    Type: String
  HECClientLocation:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'Must be a valid IP range in x.x.x.x/x notation.  Use 0.0.0.0/0 for no restrictions.'
    Description: 'The IP address range that is allowed to send data to Splunk HTTP Event Collector. Note: a value of 0.0.0.0/0 will allow access from ANY ip address'
    MaxLength: '19'
    MinLength: '9'
    Type: String
  IndexerInstanceType:
    AllowedValues:
      - m5.4xlarge
      - m5.8xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3en.3xlarge
      - i3en.6xlarge
      - i3en.12xlarge
    Description: 'EC2 instance type for Splunk Indexers'
    ConstraintDescription: 'Must be a valid EC2 instance type.'
    Default: i3.4xlarge
    Type: String
  SearchHeadInstanceType:
    AllowedValues:
      - r5.4xlarge
      - r5.8xlarge
      - r5.16xlarge
      - c5.4xlarge
      - c5.9xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
    Description: 'EC2 instance type for Splunk Search Heads'
    ConstraintDescription: 'Must be a valid EC2 instance type.'
    Default: c5.4xlarge
    Type: String
  KeyName:
    ConstraintDescription: 'Must be the name of an existing EC2 KeyPair.'
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance.'
    Type: AWS::EC2::KeyPair::KeyName
  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
    Default: '2'
    Description: 'Number of Availability Zones to use in the VPC. This must match the number public subnet IDs entered as parameters.'
    Type: String
  PublicSubnet1ID:
    Description: 'ID of Splunk public subnet 1 in Availability Zone 1 (e.g., subnet-xxxxxxxx)'
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: 'ID of Splunk public subnet 2 in Availability Zone 2 (e.g., subnet-xxxxxxxx)'
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3ID:
    Description: 'ID of Splunk public subnet 3 in Availability Zone 3 (e.g., subnet-xxxxxxxx)'
    Type: AWS::EC2::Subnet::Id
    Default: ''
  QSS3BucketName:
    Default: splk-quickstart-testing
    Description: 'S3 bucket name for the Quick Start assets.'
    Type: String
  QSS3KeyPrefix:
    Default: quickstart-splunk-enterprise/
    Description: 'S3 key prefix for the Quick Start assets.'
    Type: String
  SHCEnabled:
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
    Description: 'Do you want to build a Splunk search head cluster?'
    Type: String
  SSHClientLocation:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'Must be a valid IP range in x.x.x.x/x notation.  Use 0.0.0.0/0 for no restrictions.'
    Description: 'The IP address range that is allowed to SSH to the EC2 instances. Note: a value of 0.0.0.0/0 will allow access from ANY ip address'
    MaxLength: '19'
    MinLength: '9'
    Type: String
  SplunkAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: 'Must be at least 8 characters containing letters, numbers and symbols.'
    Description: 'Admin password for Splunk. Must be at least 8 characters containing letters, numbers and symbols.'
    MaxLength: '32'
    MinLength: '6'
    NoEcho: 'true'
    Type: String
  SplunkIndexerCount:
    ConstraintDescription: 'Must be a valid number, 4-10'
    Default: '4'
    Description: 'How many Splunk indexers to launch.  [4-10]'
    MaxValue: '10'
    MinValue: '4'
    Type: Number
  SplunkIndexerDiskSize:
    ConstraintDescription: 'Must be a valid number, 100-16000'
    Default: '334'
    Description: 'The size of the attached EBS volume to the Splunk indexers.  (in GB)'
    MaxValue: '16000'
    MinValue: '100'
    Type: Number
  SplunkSearchHeadDiskSize:
    ConstraintDescription: 'Must be a valid number, 100-16000'
    Default: '334'
    Description: 'The size of the attached EBS volume to the Splunk search head(s).  (in GB)'
    MaxValue: '16000'
    MinValue: '100'
    Type: Number
  SmartStoreBucketName:
    Default: ''
    Description: 'Name of S3 bucket to be created for SmartStore storage'
    Type: String
  SplunkLicenseBucket:
    ConstraintDescription: 'Required for QuickStart to function and must be a valid s3 bucket'
    AllowedPattern: (?=^.{3,63}$)(?!xn--)([a-z0-9](?:[a-z0-9-]*)[a-z0-9])$
    Description: 'Name of private S3 bucket with licenses to be accessed via authenticated requests'
    MinLength: '3'
    MaxLength: '63'
    Type: String
  SplunkLicensePath:
    ConstraintDescription: 'Required for QuickStart to function and must point to a valid Splunk license'
    AllowedPattern: ([0-9]|[A-Z]|[a-z]|[\/\._-])+
    Description: 'Path to license file in S3 Bucket (without leading /)'
    MinLength: '1'
    MaxLength: '128'
    Type: String
  SplunkReplicationFactor:
    ConstraintDescription: 'Must be a valid number, 2-5'
    Default: '3'
    Description: 'How many copies of data should be stored in the Splunk Indexer Cluster'
    MaxValue: '5'
    MinValue: '2'
    Type: Number
  SplunkSearchFactor:
    ConstraintDescription: 'Must be a valid number, 2-5'
    Default: '2'
    Description: 'How many copies of data should be searchable in the Splunk indexer clusters'
    MaxValue: '5'
    MinValue: '2'
    Type: Number
  SplunkClusterSecret:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: 'Must be at least 8 characters containing letters, numbers and symbols.'
    Description: 'Shared cluster secret for Search Head and Indexer cluster nodes. Must be at least 8 characters containing letters, numbers and symbols.'
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  SplunkIndexerDiscoverySecret:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: 'Must be at least 8 characters containing letters, numbers and symbols.'
    Description: 'Security key used for communication between your forwarders and the cluster master. This value should also be used by forwarders in order to retrieve list of available peer nodes from cluster master. Must be at least 8 characters containing letters, numbers and symbols.'
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: 'Must be a valid IP CIDR range of the form x.x.x.x/x.'
    Description: VPC CIDR Block (x.x.x.x/x notation)
    Type: String
  VPCID:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
Metadata:
  AWSAMIRegionMap:
    Filters:
      SPLUNKENTHVM:
        name: splunk_AMI*
        owner-alias: aws-marketplace
        product-code.type: marketplace
  QuickStartDocumentation:
    EntrypointName: "Splunk QuickStart (Existing VPC)"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Instance and Network Settings
        Parameters:
          - IndexerInstanceType
          - SearchHeadInstanceType
          - KeyName
          - WebClientLocation
          - HECClientLocation
          - SSHClientLocation
          - VPCID
          - VPCCIDR
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - NumberOfAZs
          - SmartStoreBucketName
      - Label:
          default: Splunk Settings
        Parameters:
          - SplunkAdminPassword
          - SplunkClusterSecret
          - SplunkIndexerDiscoverySecret
          - SplunkLicenseBucket
          - SplunkLicensePath
          - SplunkIndexerCount
          - SplunkIndexerDiskSize
          - SplunkSearchHeadDiskSize
          - SplunkReplicationFactor
          - SplunkSearchFactor
          - SmartStoreBucketName
          - SHCEnabled
    ParameterLabels:
      WebClientLocation:
        default: Permitted CIDR for Splunk web interface
      HECClientLocation:
        default: Permitted CIDR for Splunk HTTP event collector input
      IndexerInstanceType:
        default: EC2 instance type for Splunk indexer
      SearchHeadInstanceType:
        default: EC2 instance type for Splunk search head
      KeyName:
        default: Key Name
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      PublicSubnet3ID:
        default: Public Subnet 3 ID
      NumberOfAZs:
        default: Number of Availability Zones
      SHCEnabled:
        default: Enable Search Head Cluster?
      SSHClientLocation:
        default: Permitted CIDR for ssh
      SplunkAdminPassword:
        default: Splunk Admin Password
      SplunkIndexerCount:
        default: No. of Splunk Indexers
      SmartStoreBucketName:
        default: Name of bucket to be created for Smartstore storage
      SplunkIndexerDiskSize:
        default: Indexer Disk Size
      SplunkSearchHeadDiskSize:
        default: Search Head(s) Disk Size
      SplunkLicenseBucket:
        default: Splunk License Bucket
      SplunkLicensePath:
        default: Splunk License S3 Bucket Path
      SplunkReplicationFactor:
        default: Index Cluster Replication Factor
      SplunkSearchFactor:
        default: Index Cluster Search Factor
      SplunkClusterSecret:
        default: Shared Security Key for Cluster Nodes
      SplunkIndexerDiscoverySecret:
        default: Shared Security Key for Forwarders using Indexer Discovery
      VPCCIDR:
        default: VPC CIDR
      VPCID:
        default: VPC ID
Conditions:
  Create3AZ: !Equals
    - !Ref 'NumberOfAZs'
    - '3'
  CreateSingleSearchHead: !Equals
    - !Ref 'SHCEnabled'
    - 'no'
  CreateSHC: !Equals
    - !Ref 'SHCEnabled'
    - 'yes'
  ConfigureLicense: !And
    - !Not
      - !Equals
        - ''
        - !Ref 'SplunkLicenseBucket'
    - !Not
      - !Equals
        - ''
        - !Ref 'SplunkLicensePath'
Mappings:
  AWSAMIRegionMap:
    AMI:
      SPLUNKENTHVM: splunk_AMI_8.1.2_2021-02-18_01-19-37-7b65de6c-5006-4ca2-bd75-fdba95ae5d9d
    us-west-1:
      SPLUNKENTHVM: ami-0577151e81e068c5b
    us-west-2:
      SPLUNKENTHVM: ami-0b21b11c334ca0427
    us-east-1:
      SPLUNKENTHVM: ami-01daa6ad903c19b1c
    us-east-2:
      SPLUNKENTHVM: ami-01a5e6fa6480c2a19
    ap-south-1:
      SPLUNKENTHVM: ami-026e00e2fa5434afc
    ap-northeast-1:
      SPLUNKENTHVM: ami-0b0869d223a5311d5
    ap-northeast-2:
      SPLUNKENTHVM: ami-033bc43ac1100027e
    ap-southeast-1:
      SPLUNKENTHVM: ami-0baefc1b789d60c08
    ap-southeast-2:
      SPLUNKENTHVM: ami-09c3ddc0d05b5539d
    ca-central-1:
      SPLUNKENTHVM: ami-0c124bcd160964f7e
    eu-central-1:
      SPLUNKENTHVM: ami-005e223f1e49e674a
    eu-west-1:
      SPLUNKENTHVM: ami-0b3e2338bf64a9689
    eu-west-2:
      SPLUNKENTHVM: ami-0f5ecbafcccecefba
    eu-west-3:
      SPLUNKENTHVM: ami-01836340f853aa028
    eu-north-1:
      SPLUNKENTHVM: ami-05c5ebd60f152af2d
    sa-east-1:
      SPLUNKENTHVM: ami-07d6b2b977c0886c7

  SplunkConfig:
    dedicated-instance-type:
      clusterMaster: c5.xlarge
      shclusterDeployer: c5.xlarge
    shcluster-replication-factor:
      num: '3'
    labels:
      cluster: IndexerCluster
      shcluster: SearchHeadCluster
Resources:
  SplunkSmartstoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'SmartStoreBucketName'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Delete
  SmartStoreS3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  SmartStoreS3AccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'SmartStoreS3BucketRole'
  SmartStoreS3BucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SmartStoreS3BucketPolicy
      PolicyDocument:
        Statement:
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'SmartStoreBucketName'
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'SmartStoreBucketName'
                  - /*
      Roles:
        - !Ref 'SmartStoreS3BucketRole'
  SplunkSearchHeadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: 'Enable port 8000 for Splunk web interface, port 8090 for SHC replication, and port 8191 for KV store replication'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref 'WebClientLocation'
        - IpProtocol: tcp
          FromPort: 8090
          ToPort: 8090
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 8191
          ToPort: 8191
          CidrIp: !Ref 'VPCCIDR'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: SplunkSearchHeadSecurityGroup
  SplunkIndexerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: 'Enable port 9997 for splunktcp input, port 8088 for HEC input, port 514 for tcp/udp input, and port 9887 for data replication'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9997
          ToPort: 9997
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          SourceSecurityGroupId: !Ref 'SplunkHttpEventCollectorLoadBalancerSecurityGroup'
        - IpProtocol: tcp
          FromPort: 514
          ToPort: 514
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: udp
          FromPort: 514
          ToPort: 514
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 9887
          ToPort: 9887
          CidrIp: !Ref 'VPCCIDR'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: SplunkIndexerSecurityGroup
  SplunkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: 'Enable administrative ports like restricted SSH and management port'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHClientLocation'
        - IpProtocol: tcp
          FromPort: 8089
          ToPort: 8089
          CidrIp: !Ref 'VPCCIDR'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: SplunkSecurityGroup
  SplunkHttpEventCollectorLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCID'
      GroupDescription: 'Enable port 8088 on ELB for HEC input'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8088
          ToPort: 8088
          CidrIp: !Ref 'HECClientLocation'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: SplunkHttpEventCollectorLoadBalancerSecurityGroup
  SplunkSearchHeadInstance:
    Type: AWS::EC2::Instance
    Condition: CreateSingleSearchHead
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !Ref 'SearchHeadInstanceType'
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Role
          Value: splunk-search-head
        - Key: Name
          Value: search-head
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'SplunkSecurityGroup'
            - !Ref 'SplunkSearchHeadSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref 'PublicSubnet1ID'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'SplunkSearchHeadDiskSize'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              export INSTALL_LICENSE="0"
              export SYMMKEY="${SplunkIndexerDiscoverySecret}"
              export ADMIN_PASSWORD="${SplunkAdminPassword}"
              export STACK_NAME="${AWS::StackName}"
              export AWS_REGION="${AWS::Region}"
              export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
              export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
              export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
              wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
              export CM_PRIVATEIP="${SplunkCMIP}"
              /tmp/user_data.sh single_sh && rm -f /tmp/user_data.sh
            - SplunkCMIP: !GetAtt SplunkCM.PrivateIp
  SplunkCM:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init: !If
        - ConfigureLicense
        - config:
            files:
              /opt/splunk/etc/licenses/enterprise/splunk.license:
                source: !If
                  - ConfigureLicense
                  - !Join
                    - ''
                    - - https://
                      - !Ref 'SplunkLicenseBucket'
                      - .s3.amazonaws.com/
                      - !Ref 'SplunkLicensePath'
                  - !Ref 'AWS::NoValue'
                mode: '000600'
                owner: splunk
                group: splunk
                authentication: S3AccessCreds
        - !Ref 'AWS::NoValue'
      AWS::CloudFormation::Authentication: !If
        - ConfigureLicense
        - S3AccessCreds:
            type: S3
            accessKeyId: !Ref 'CfnKeys'
            secretKey: !GetAtt 'CfnKeys.SecretAccessKey'
            buckets:
              - !Ref 'SplunkLicenseBucket'
        - !Ref 'AWS::NoValue'
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 334
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'SplunkSecurityGroup'
            - !Ref 'SplunkSearchHeadSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref 'PublicSubnet1ID'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !FindInMap
        - SplunkConfig
        - dedicated-instance-type
        - clusterMaster
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Role
          Value: cluster-master
        - Key: Name
          Value: cluster-master
      UserData:
       Fn::Base64:
        Fn::Sub:
          - |
            #!/bin/bash -xe
            export INSTALL_LICENSE="0"
            export SYMMKEY="${SplunkIndexerDiscoverySecret}"
            export ADMIN_PASSWORD="${SplunkAdminPassword}"
            export STACK_NAME="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
            export REPFACTOR="${SplunkReplicationFactor}"
            export SEARCHFACTOR="${SplunkSearchFactor}"
            export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
            export SITELIST="${Sitelist}"
            export INSTALL_LICENSE="${InstallLicense}"
            wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
            /tmp/user_data.sh cm && rm -f /tmp/user_data.sh
          - Sitelist: !If [Create3AZ, "site1,site2,site3", "site1,site2" ]
            InstallLicense: !If [ConfigureLicense, "1", "0"]
  SplunkCMWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  SplunkCMWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: SplunkCM
    Properties:
      Handle: !Ref 'SplunkCMWaitHandle'
      Timeout: '900'
  SplunkSHCDeployer:
    Type: AWS::EC2::Instance
    Condition: CreateSHC
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !FindInMap
        - SplunkConfig
        - dedicated-instance-type
        - shclusterDeployer
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Role
          Value: splunk-deployer
        - Key: Name
          Value: deployer
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'SplunkSecurityGroup'
            - !Ref 'SplunkSearchHeadSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref 'PublicSubnet1ID'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'SplunkSearchHeadDiskSize'
      UserData:
       Fn::Base64:
        Fn::Sub:
          - |
            #!/bin/bash -xe
            export INSTALL_LICENSE="0"
            export SYMMKEY="${SplunkIndexerDiscoverySecret}"
            export ADMIN_PASSWORD="${SplunkAdminPassword}"
            export STACK_NAME="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
            export REPFACTOR="${SplunkReplicationFactor}"
            export SEARCHFACTOR="${SplunkSearchFactor}"
            export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
            export CM_PRIVATEIP="${SplunkCMIP}"
            wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
            /tmp/user_data.sh deployer && rm -f /tmp/user_data.sh
          - SplunkCMIP: !GetAtt SplunkCM.PrivateIp
  SplunkSHCMember1:
    Type: AWS::EC2::Instance
    Condition: CreateSHC
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !Ref 'SearchHeadInstanceType'
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Role
          Value: splunk-search-head
        - Key: Name
          Value: search-head-1
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'SplunkSecurityGroup'
            - !Ref 'SplunkSearchHeadSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref 'PublicSubnet1ID'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'SplunkSearchHeadDiskSize'
      UserData:
       Fn::Base64:
        Fn::Sub:
          - |
            #!/bin/bash -xe
            export INSTALL_LICENSE="0"
            export SYMMKEY="${SplunkIndexerDiscoverySecret}"
            export ADMIN_PASSWORD="${SplunkAdminPassword}"
            export STACK_NAME="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
            export REPFACTOR="${SplunkReplicationFactor}"
            export SEARCHFACTOR="${SplunkSearchFactor}"
            export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
            export CM_PRIVATEIP="${SplunkCMIP}"
            export SH_REPLICATION_FACTOR="${SplunkReplicationFactor}"
            export THREEAZ="${THREEAZ}"
            export SH_DEPLOYER_IP="${SH_DEPLOYER_IP}"
            wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
            /tmp/user_data.sh cluster_sh 1 && rm -f /tmp/user_data.sh
          - SplunkCMIP: !GetAtt SplunkCM.PrivateIp
            SH_DEPLOYER_IP: !GetAtt SplunkSHCDeployer.PrivateIp
            THREEAZ: !If [ Create3AZ, "1", "0" ]
  SplunkSHCMember2:
    Type: AWS::EC2::Instance
    Condition: CreateSHC
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !Ref 'SearchHeadInstanceType'
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Role
          Value: splunk-search-head
        - Key: Name
          Value: search-head-2
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'SplunkSecurityGroup'
            - !Ref 'SplunkSearchHeadSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !Ref 'PublicSubnet2ID'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'SplunkSearchHeadDiskSize'
      UserData:
       Fn::Base64:
        Fn::Sub:
          - |
            #!/bin/bash -xe
            export INSTALL_LICENSE="0"
            export SYMMKEY="${SplunkIndexerDiscoverySecret}"
            export ADMIN_PASSWORD="${SplunkAdminPassword}"
            export STACK_NAME="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
            export REPFACTOR="${SplunkReplicationFactor}"
            export SEARCHFACTOR="${SplunkSearchFactor}"
            export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
            export CM_PRIVATEIP="${SplunkCMIP}"
            export SH_REPLICATION_FACTOR="${SplunkReplicationFactor}"
            export THREEAZ="${THREEAZ}"
            export SH_DEPLOYER_IP="${SH_DEPLOYER_IP}"
            wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
            /tmp/user_data.sh cluster_sh 2 && rm -f /tmp/user_data.sh
          - SplunkCMIP: !GetAtt SplunkCM.PrivateIp
            SH_DEPLOYER_IP: !GetAtt SplunkSHCDeployer.PrivateIp
            THREEAZ: !If [ Create3AZ, "1", "0" ]
  SplunkSHCMember3:
    Type: AWS::EC2::Instance
    Condition: CreateSHC
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !Ref 'SearchHeadInstanceType'
      KeyName: !Ref 'KeyName'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Role
          Value: splunk-search-head
        - Key: Name
          Value: search-head-3
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'SplunkSecurityGroup'
            - !Ref 'SplunkSearchHeadSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !If
            - Create3AZ
            - !Ref 'PublicSubnet3ID'
            - !Ref 'PublicSubnet2ID'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'SplunkSearchHeadDiskSize'
      UserData:
       Fn::Base64:
        Fn::Sub:
          - |
            #!/bin/bash -xe
            export INSTALL_LICENSE="0"
            export SYMMKEY="${SplunkIndexerDiscoverySecret}"
            export ADMIN_PASSWORD="${SplunkAdminPassword}"
            export STACK_NAME="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
            export REPFACTOR="${SplunkReplicationFactor}"
            export SEARCHFACTOR="${SplunkSearchFactor}"
            export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
            export CM_PRIVATEIP="${SplunkCMIP}"
            export SH_REPLICATION_FACTOR="${SplunkReplicationFactor}"
            export THREEAZ="${THREEAZ}"
            export SH_DEPLOYER_IP="${SH_DEPLOYER_IP}"
            wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
            /tmp/user_data.sh cluster_sh 3 && rm -f /tmp/user_data.sh
          - SplunkCMIP: !GetAtt SplunkCM.PrivateIp
            SH_DEPLOYER_IP: !GetAtt SplunkSHCDeployer.PrivateIp
            THREEAZ: !If [ Create3AZ, "1", "0" ]
  CfnUser:
    Type: AWS::IAM::User
    Condition: ConfigureLicense
    Properties:
      Path: /
  CfnKeys:
    Type: AWS::IAM::AccessKey
    Condition: ConfigureLicense
    Properties:
      UserName: !Ref 'CfnUser'
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: ConfigureLicense
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: MyPolicy
        Statement:
          - Sid: ReadAccess
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'SplunkLicenseBucket'
                - /*
            Principal:
              AWS: !GetAtt 'CfnUser.Arn'
      Bucket: !Ref 'SplunkLicenseBucket'
  SplunkIndexerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref 'SmartStoreS3AccessInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'SplunkIndexerDiskSize'
      SecurityGroups:
        - !Ref 'SplunkSecurityGroup'
        - !Ref 'SplunkIndexerSecurityGroup'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - SPLUNKENTHVM
      InstanceType: !Ref 'IndexerInstanceType'
      KeyName: !Ref 'KeyName'
      UserData:
       Fn::Base64:
        Fn::Sub:
          - |
            #!/bin/bash -xe
            export INSTALL_LICENSE="0"
            export SYMMKEY="${SplunkIndexerDiscoverySecret}"
            export ADMIN_PASSWORD="${SplunkAdminPassword}"
            export STACK_NAME="${AWS::StackName}"
            export AWS_REGION="${AWS::Region}"
            export SPLUNK_CLUSTER_SECRET="${SplunkClusterSecret}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export SplunkCMWaitHandle="${SplunkCMWaitHandle}"
            export REPFACTOR="${SplunkReplicationFactor}"
            export SEARCHFACTOR="${SplunkSearchFactor}"
            export S3_USERDATA="https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/user_data.sh"
            export CM_PRIVATEIP="${SplunkCMIP}"
            export SH_REPLICATION_FACTOR="${SplunkReplicationFactor}"
            export SMARTSTORE_BUCKET="${SmartStoreBucketName}"
            export CM_PRIVATEIP="${SplunkCMIP}"
            export SUBNET1_ID="${PublicSubnet1ID}"
            export SUBNET2_ID="${PublicSubnet2ID}"
            export SUBNET3_ID="${PublicSubnet3ID}"
            wget $S3_USERDATA -O /tmp/user_data.sh && chmod +x /tmp/user_data.sh
            /tmp/user_data.sh indexer && rm -f /tmp/user_data.sh
          - SplunkCMIP: !GetAtt SplunkCM.PrivateIp
  SplunkSHCLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: CreateSHC
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      LBCookieStickinessPolicy:
        - CookieExpirationPeriod: '86400'
          PolicyName: SplunkWebCookiePolicy
      Instances:
        - !Ref 'SplunkSHCMember1'
        - !Ref 'SplunkSHCMember2'
        - !Ref 'SplunkSHCMember3'
      Listeners:
        - LoadBalancerPort: '8000'
          InstancePort: '8000'
          Protocol: HTTP
          PolicyNames:
            - SplunkWebCookiePolicy
      Scheme: internet-facing
      SecurityGroups:
        - !Ref 'SplunkSecurityGroup'
        - !Ref 'SplunkSearchHeadSecurityGroup'
      CrossZone: true
      Subnets: !If
        - Create3AZ
        - - !Ref 'PublicSubnet1ID'
          - !Ref 'PublicSubnet2ID'
          - !Ref 'PublicSubnet3ID'
        - - !Ref 'PublicSubnet1ID'
          - !Ref 'PublicSubnet2ID'
      HealthCheck:
        Target: TCP:8089
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '5'
  SplunkHttpEventCollectorLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      Listeners:
        - InstancePort: '8088'
          InstanceProtocol: HTTPS
          LoadBalancerPort: '8088'
          Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
        - !Ref 'SplunkHttpEventCollectorLoadBalancerSecurityGroup'
      CrossZone: true
      Subnets: !If
        - Create3AZ
        - - !Ref 'PublicSubnet1ID'
          - !Ref 'PublicSubnet2ID'
          - !Ref 'PublicSubnet3ID'
        - - !Ref 'PublicSubnet1ID'
          - !Ref 'PublicSubnet2ID'
      HealthCheck:
        Target: HTTPS:8088/services/collector/health
        HealthyThreshold: '3'
        UnhealthyThreshold: '2'
        Interval: '20'
        Timeout: '5'
      Policies:
        - PolicyName: EnableProxyProtocol
          PolicyType: ProxyProtocolPolicyType
          Attributes:
            - Name: ProxyProtocol
              Value: true
          InstancePorts:
            - '8088'
  SplunkIndexerNodesASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: SplunkCM
    Properties:
      VPCZoneIdentifier: !If
        - Create3AZ
        - - !Ref 'PublicSubnet1ID'
          - !Ref 'PublicSubnet2ID'
          - !Ref 'PublicSubnet3ID'
        - - !Ref 'PublicSubnet1ID'
          - !Ref 'PublicSubnet2ID'
      LaunchConfigurationName: !Ref 'SplunkIndexerLaunchConfiguration'
      MinSize: !Ref 'SplunkIndexerCount'
      MaxSize: !Ref 'SplunkIndexerCount'
      DesiredCapacity: !Ref 'SplunkIndexerCount'
      LoadBalancerNames:
        - !Ref 'SplunkHttpEventCollectorLoadBalancer'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: true
        - Key: Role
          Value: splunk-indexer
          PropagateAtLaunch: true
        - Key: Name
          Value: indexer-N
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'SplunkIndexerCount'
        Timeout: PT30M
Outputs:
  SearchHeadURL:
    Description: 'Splunk Enterprise - Search Head URL'
    Value: !Join
      - ''
      - - http://
        - !If
          - CreateSHC
          - !GetAtt 'SplunkSHCLoadBalancer.DNSName'
          - !GetAtt 'SplunkSearchHeadInstance.PublicIp'
        - :8000
  ClusterMasterURL:
    Description: 'Splunk Enterprise - Cluster Master URL'
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'SplunkCM.PublicIp'
        - :8000
  ClusterMasterManagementURL:
    Description: 'Splunk Enterprise - Cluster Master Management URL (required for Indexer Discovery)'
    Value: !Join
      - ''
      - - https://
        - !GetAtt SplunkCM.PrivateIp
        - :8089
  DeployerURL:
    Description: 'Splunk Enterprise - Search Head Cluster Deployer URL'
    Value: !If
      - CreateSHC
      - !Join
        - ''
        - - http://
          - !GetAtt 'SplunkSHCDeployer.PublicIp'
          - :8000
      - Applicable when Search Head Cluster is selected
  HttpEventCollectorURL:
    Description: 'HTTP Event Collector URL'
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'SplunkHttpEventCollectorLoadBalancer.DNSName'
        - :8088
        - /services/collector
  HttpEventCollectorToken:
    Description: 'HTTP Event Collector Token'
    Value: !Select
      - '1'
      - !Split
        - '"'
        - !Select
          - '1'
          - !Split
            - ':'
            - !GetAtt 'SplunkCMWaitCondition.Data'
