#!/bin/bash


# variables
export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
export SPLUNK_USER=splunk
export SPLUNK_BIN=/opt/splunk/bin/splunk
export SPLUNK_HOME=/opt/splunk


# make cloud-init output log readable by root only to protect sensitive parameter values
chmod 600 /var/log/cloud-init-output.log

# remove the cloud-init script from running again

rm -f /etc/cloud/cloud.cfg.d/20_install_splunk.cfg
rm -f /var/lib/cloud/instance/scripts/runcmd

#- The newer version of the Splunk AMI does not come with Splunk pre-installed.  Instead
#- Splunk is installed via ansible as part of cloud-init.  The following code (line 28) is
#- needed to ensure these install scripts are ran prior to the remainder of the Cloudformation
#- user scripts. Without doing this first, the Splunk installer is ran after CloudFormation's
#- cloud-init scripts, leaving no Splunk install to configure.

(cd /opt/splunk-ansible && time sudo -u ec2-user -E -S bash -c "SPLUNK_BUILD_URL=/tmp/splunk.tgz SPLUNK_ENABLE_SERVICE=true  SPLUNK_PASSWORD=SPLUNK-$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id) ansible-playbook -i inventory/environ.py site.yml")

# start splunk for initialization, and then stop to make edits.
#/bin/systemctl start Splunkd
#/bin/systemctl stop Splunkd
$SPLUNK_BIN stop

# update cfn package
yum update -y aws-cfn-bootstrap


# setup auth with user-selected admin password
mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak
cat >>$SPLUNK_HOME/etc/system/local/user-seed.conf <<end
[user_info]
USERNAME = admin
PASSWORD = $ADMIN_PASSWORD
end

sed -i '/guid/d' $SPLUNK_HOME/etc/instance.cfg
touch $SPLUNK_HOME/etc/.ui_login

# restart Splunk for changes to take effect
#/bin/systemctl restart Splunkd
$SPLUNK_BIN start

#### start universal functions

function restart_signal
{

  # restart splunk
  #/bin/systemctl restart Splunkd
  $SPLUNK_BIN restart

  # communicate back to CloudFormation the status of the instance creation
  /opt/aws/bin/cfn-signal -e $? --stack $STACK_NAME --resource SplunkSearchHeadInstance \
  --region $AWS_REGION

  # disable splunk user login
  usermod --expiredate 1 splunk
}

#### end universal config

#####
#### start user data functions
#####

function splunk_cm
{
  echo;
}

function indexer
{
  echo;
}

function splunk_cluster_sh
{
  echo;
}

function splunk_deployer
{
  echo;
}

## splunk single search head
function splunk_single_sh
{
  # add hostname to /etc/hosts and set hostname
  printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts
  hostname splunksearch

  # stop splunk to make changes to search head configs
  #/bin/systemctl stop Splunkd

  # Increase splunkweb connection timeout with splunkd
  mkdir -p $SPLUNK_HOME/etc/apps/base-autogenerated/local
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/web.conf <<end
  [settings]
  splunkdConnectionTimeout = 300
end


  # Forward to indexer cluster using indexer discovery
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/outputs.conf <<end
  # Turn off indexing on the search head
  [indexAndForward]
  index = false

  [tcpout]
  defaultGroup = indexer_cluster_peers
  forwardedindex.filter.disable = true
  indexAndForward = false
  [tcpout:indexer_cluster_peers]
  indexerDiscovery = cluster_master
  [indexer_discovery:cluster_master]
  pass4SymmKey = $SYMMKEY
  master_uri = https://$CM_PRIVATEIP:8089
end

  # update permissions
  chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps/base-autogenerated

  # setup license server communication
  sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave -master_uri https://$CM_PRIVATEIP:8089 \
  -auth admin:$ADMIN_PASSWORD

  # configure communication to the splunk indexer cluster
  sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -secret $SPLUNK_CLUSTER_SECRET \
  -mode searchhead -site site1 -master_uri https://$CM_PRIVATEIP:8089 -auth admin:$ADMIN_PASSWORD

  # install search head apps, if appropriate

  if [ $INSTALL_SH_APPS = 1 ];
  then
    for i in ${!USER_APPS[*]}
    do
      echo "Downloading app ${user_apps[$i]}"
      if wget --tries=3 ${user_apps[$i]} -O /tmp/app${i}.spl
      then
        echo "Installing app..."
        tar -xvzf /tmp/app${i}.spl -C $SPLUNK_HOME/etc/apps/
        if [ $? -ne 0 ]; then
          echo "Extracting tarball failed"
        fi
        rm /tmp/app${i}.spl
      else
        echo "Downloading tarball failed"
      fi
    done
    #- set ownership
    chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps
  fi

  # final restart and cfn signal
  restart_signal
}




case "$1" in
  "single_sh")
    splunk_single_sh
    ;;
  "cluster_sh")
    splunk_cluster_sh
    ;;
  "indexer")
    splunk_indexer
    ;;
  "cm")
    splunk_cm
    ;;
  "deployer")
    splunk_deployer
    ;;
  *)
    echo "Usage: $basename [single_sh|cluster_sh|indexer|cm|deployer]";
    exit 0
esac












