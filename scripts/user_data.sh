#!/bin/bash -v

##
#- user script for Splunk search head
##

#- The newer version of the Splunk AMI does not come with Splunk pre-installed.  Instead
#- Splunk is installed via ansible as part of cloud-init.  The following command
#- is needed to ensure these install scripts are ran prior to the remainder of the user
#- scripts.  Without doing this first, the Splunk installer is ran after CloudFormation's
#- cloud-init scripts, leaving no Splunk install for these scripts to configure.

(cd /opt/splunk-ansible && sudo -u ec2-user -E -S bash -c \"SPLUNK_BUILD_URL=/tmp/splunk.tgz SPLUNK_ENABLE_SERVICE=true  SPLUNK_PASSWORD=SPLUNK-$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id) ansible-playbook -i inventory/environ.py site.yml)

#- remove the cloud-init script from running since it's already been ran manually.
rm -f /etc/cloud/cloud.cfg.d/20_install_splunk.cfg
/bin/systemctl start Splunkd
/bin/systemctl stop Splunkd

# First make cloud-init output log readable by root only to protect sensitive parameter values
chmod 600 /var/log/cloud-init-output.log

#- update package
yum update -y aws-cfn-bootstrap

#- variables
export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
export SPLUNK_USER=splunk
export SPLUNK_BIN=/opt/splunk/bin/splunk
export SPLUNK_HOME=/opt/splunk

#- add hostname to /etc/hosts and set hostname
printf '%s\t%s\n' \"$LOCALIP\" 'splunksearch' >> /etc/hosts
hostname splunksearch

#- setup auth with user-selected admin password
mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak
cat >>$SPLUNK_HOME/etc/system/local/user-seed.conf <<end
[user_info]
USERNAME = admin
PASSWORD = $ADMIN_PASSWORD
end

#- disable password reset on login
sed -i '/guid/d' $SPLUNK_HOME/etc/instance.cfg
sed -i 's/ENFORCE_PWD_CHANGE=1/ENFORCE_PWD_CHANGE=0/' /etc/init.d/splunk
touch $SPLUNK_HOME/etc/.ui_login

#- restart Splunk for changes to take effect
/opt/splunk/bin/splunk restart

# Increase splunkweb connection timeout with splunkd
mkdir -p $SPLUNK_HOME/etc/apps/base-autogenerated/local
cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/web.conf <<end
[settings]
splunkdConnectionTimeout = 300
end

# Forward to indexer cluster using indexer discovery
cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/outputs.conf <<end
# Turn off indexing on the search head
[indexAndForward]
index = false

[tcpout]
defaultGroup = indexer_cluster_peers
forwardedindex.filter.disable = true
indexAndForward = false
[tcpout:indexer_cluster_peers]
indexerDiscovery = cluster_master
[indexer_discovery:cluster_master]
pass4SymmKey = $SYMMKEY
master_uri = https://$CM_PRIVATEIP:8089
end

#- set permissions
chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps/base-autogenerated

#- start splunk
/opt/splunk/bin/splunk start

#- setup license server
sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave -master_uri https://$CM_PRIVATEIP:8089 \
-auth admin:$ADMIN_PASSWORD

"sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -secret ",
{
"Ref": "SplunkClusterSecret"
},
" -mode searchhead -site site1 -master_uri https://",
{
"Fn::GetAtt": [
"SplunkCM",
"PrivateIp"
]
},
":8089 -auth admin:",
{
"Ref": "SplunkAdminPassword"
},
"\n",
{
"Fn::If": [
"InstallSearchHeadApps",
{
"Fn::Join": [
"",
[
"# Add user-provided apps for cluster members\n",
"user_apps=( ",
{
"Fn::Join": [
" ",
{
"Ref": "SearchHeadApps"
}
]
},
 ),
for i in ${!user_apps[*]}
do
   echo \"Downloading app ${user_apps[$i]}\"
   if wget --tries=3 ${user_apps[$i]} -O /tmp/app${i}.spl; then
        echo \"Installing app...\"
        tar -xvzf /tmp/app${i}.spl -C $SPLUNK_HOME/etc/apps/
        if [ $? -ne 0 ]; then
            echo \"Extracting tarball failed\"
        fi
        rm /tmp/app${i}.spl
    else
        echo \"Downloading tarball failed\"
    fi
done
chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps
]

},
""
]
},
"/opt/splunk/bin/splunk restart\n",
"/opt/aws/bin/cfn-signal -e $? --stack ",
{
"Ref": "AWS::StackName"
},
" --resource SplunkSearchHeadInstance",
" --region ",
{
"Ref": "AWS::Region"
},
"\n",
"usermod --expiredate 1 splunk\n"
