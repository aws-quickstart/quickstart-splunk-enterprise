#!/bin/bash

# https://splk-quickstart-testing.s3.us-west-2.amazonaws.com/quickstart-splunk-enterprise/templates/splunk-enterprise-master-ss.template

# variables
export LOCALIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
export INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
export SPLUNK_USER=splunk
export SPLUNK_BIN=/opt/splunk/bin/splunk
export SPLUNK_HOME=/opt/splunk


# make cloud-init output log readable by root only to protect sensitive parameter values
chmod 600 /var/log/cloud-init-output.log



#- The newer version of the Splunk AMI does not come with Splunk pre-installed.  Instead
#- Splunk is installed via ansible as part of cloud-init.  The following code (line 28) is
#- needed to ensure these install scripts are ran prior to the remainder of the Cloudformation
#- user scripts. Without doing this first, the Splunk installer is ran after CloudFormation's
#- cloud-init scripts, leaving no Splunk install to configure.

# remove the cloud-init scripts from running
rm -f /etc/cloud/cloud.cfg.d/20_install_splunk.cfg
rm -f /var/lib/cloud/instance/scripts/runcmd

# run the ansible manually
(cd /opt/splunk-ansible && time sudo -u ec2-user -E -S bash -c "SPLUNK_BUILD_URL=/tmp/splunk.tgz SPLUNK_ENABLE_SERVICE=true  SPLUNK_PASSWORD=SPLUNK-$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id) ansible-playbook -i inventory/environ.py site.yml")

# start splunk for initialization, and then stop to make edits.
#/bin/systemctl start Splunkd
#/bin/systemctl stop Splunkd
# $SPLUNK_BIN stop

# update cfn package
yum update -y aws-cfn-bootstrap


# setup auth with user-selected admin password
mv $SPLUNK_HOME/etc/passwd $SPLUNK_HOME/etc/passwd.bak
cat >>$SPLUNK_HOME/etc/system/local/user-seed.conf <<end
[user_info]
USERNAME = admin
PASSWORD = $ADMIN_PASSWORD
end

sed -i '/guid/d' $SPLUNK_HOME/etc/instance.cfg
touch $SPLUNK_HOME/etc/.ui_login

# restart Splunk for admin password update
$SPLUNK_BIN restart

#### start universal functions

function restart_signal
{

  # restart splunk
  #/bin/systemctl restart Splunkd
  $SPLUNK_BIN restart

  # communicate back to CloudFormation the status of the instance creation
  /opt/aws/bin/cfn-signal -e $? --stack $STACK_NAME --resource $RESOURCE --region $AWS_REGION

  # disable splunk user login
  usermod --expiredate 1 splunk
}

#### end universal config

#####
#### start user data functions
#####

###
# Splunk Cluster Master / License Master
###
function splunk_cm
{
  export RESOURCE="SplunkCM"
  printf '%s\t%s\n' "$LOCALIP" 'splunklicense' >> /etc/hosts
  hostname splunklicense

  #- for the CM, we can't reference CM_PRIVATE_IP in the CloudFormation UserData like
  #- we do in the other resources because the CM hasn't been created yet.  To keep the
  #- syntax consistent across each resource in user_data.sh, export $CM_PRIVATEIP to
  #- the CM's local ip address
  export CM_PRIVATEIP=$LOCALIP

  # Install license from metadata.  This is only relevant if the user uploads a license file.
  if [ $INSTALL_LICENSE = 1 ]; then
    /opt/aws/bin/cfn-init -v --stack $STACK_NAME --resource $RESOURCE --region $AWS_REGION
    mkdir -p /opt/splunk/etc/licenses/enterprise/
    mv /etc/splunk/splunk.license /opt/splunk/etc/licenses/enterprise/splunk.license
  fi

  mkdir -p $SPLUNK_HOME/etc/licenses/enterprise
  chown $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/licenses/enterprise
  mv /etc/splunk/splunk.license $SPLUNK_HOME/etc/licenses/enterprise/

  # Increase splunkweb connection timeout with splunkd
  mkdir -p $SPLUNK_HOME/etc/apps/base-autogenerated/local
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/web.conf <<end
  [settings]
  splunkdConnectionTimeout = 300
end

 # Forward to indexer cluster using indexer discovery\n",
 cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/outputs.conf <<end
  # Turn off indexing
  [indexAndForward]
  index = false

  [tcpout]
  defaultGroup = indexer_cluster_peers
  forwardedindex.filter.disable = true
  indexAndForward = false

  [tcpout:indexer_cluster_peers]
  indexerDiscovery = cluster_master

  [indexer_discovery:cluster_master]
  pass4SymmKey = $SYMMKEY
  master_uri = https://127.0.0.1:8089
end

  chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps/base-autogenerated
  $SPLUNK_BIN restart
  sleep 10

  # log in to splunk to execute several commands without requiring -auth
  sudo -u $SPLUNK_USER $SPLUNK_BIN login -auth admin:$ADMIN_PASSWORD

  # create the indexer cluster
  sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -mode master -multisite true \
  -replication_factor $REPFACTOR -available_sites $SITELIST -site site1 \
  -site_replication_factor origin:1,total:$REPFACTOR -site_search_factor \
  origin:1,total:$SEARCHFACTOR -secret $SPLUNK_CLUSTER_SECRET -cluster_label SplunkIndexersASG


  # Configure indexer discovery
  cat >>$SPLUNK_HOME/etc/system/local/server.conf <<end

  [indexer_discovery]
  pass4SymmKey = $SYMMKEY
  indexerWeightByDiskCapacity = true
end
  chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/system/local/server.conf

  # add base config for peer nodes (indexers) as an app under master-apps
  # peer config 1: ENABLE HEC input on indexers

  printf "** create HEC token\t" && date
  # generate the config file and HEC token
  sudo -u $SPLUNK_USER $SPLUNK_BIN http-event-collector enable -uri https://localhost:8089
  sudo -u $SPLUNK_USER $SPLUNK_BIN http-event-collector create default-token \
  -uri https://localhost:8089 > /tmp/token
  TOKEN=`sed -n 's/\\ttoken=//p' /tmp/token` && rm /tmp/token
  #echo $TOKEN

  # place generated config into master-apps
  mkdir -p $SPLUNK_HOME/etc/master-apps/peer-base-autogenerated/local
  mv $SPLUNK_HOME/etc/apps/splunk_httpinput/local/inputs.conf $SPLUNK_HOME/etc/master-apps/peer-base-autogenerated/local

  # peer config 2: enable splunk tcp input
  cat >>$SPLUNK_HOME/etc/master-apps/peer-base-autogenerated/local/inputs.conf <<end
  [splunktcp://9997]
  disabled=0
end

  # Configure smartstore as a configuration in a bundle. The same configuration
  # ... is also added to each indexer as if the bundle was already pushed.
  # ... this should allow easy recovery for maintenance and future bundle pushes.
  # ... note, SmartStore set for all indexes.
  # ... also note the first part of the file is base64 to get around a dollar sign in the .


  mkdir -p $SPLUNK_HOME/etc/master-apps/_cluster/local/
  touch $SPLUNK_HOME/etc/master-apps/_cluster/local/indexes.conf

  cat >>$SPLUNK_HOME/etc/master-apps/_cluster/local/indexes.conf <<end
    [default]
    repFactor = auto
    remotePath = volume:remote_store/splunk_db/$_index_name
    coldPath=$SPLUNK_DB/$_index_name/colddb
    thawedPath=$SPLUNK_DB/$_index_name/thaweddb

   [volume:remote_store]
   storageType = remote

   path = s3://$SMARTSTORE_BUCKET
   remote.s3.encryption = sse-s3
end

  chown -R splunk:splunk $SPLUNK_HOME/etc/master-apps/_cluster/local/indexes.conf

  if [ $INSTALL_INDEXER_APPS = 1 ]; then
    for i in ${!user_apps[*]}
    do
     echo "Downloading app ${user_apps[$i]}"
     if wget --tries=3 ${user_apps[$i]} -O /tmp/app${i}.spl; then
      echo "Installing app..."
      tar -xvzf /tmp/app${i}.spl -C $SPLUNK_HOME/etc/master-apps/
      if [ $? -ne 0 ]; then
        echo "Extracting tarball failed"
      fi
      rm /tmp/app${i}.spl
    else
      echo "Downloading tarball failed"
    fi
    done
    # chown the installed apps if any were installed
    chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/master-apps
  fi

  restart_signal

  # signal with the generated HEC to show on cloudformation outputs section
  /opt/aws/bin/cfn-signal -e 0 -i token -d $TOKEN $SplunkCMWaitHandle

}

function indexer
{
  echo;
}

function splunk_cluster_sh
{
  echo;
}

###
# Splunk Deployer
###
function splunk_deployer
{
  export RESOURCE="SplunkSHCDeployer"
  printf "$LOCALIP \t splunk-shc-deployer\n" >> /etc/hosts
  hostname splunk-shc-deployer

  # Increase splunkweb connection timeout with splunkd
  mkdir -p $SPLUNK_HOME/etc/apps/base-autogenerated/local
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/web.conf <<end
  [settings]
  splunkdConnectionTimeout = 300
end

  # Configure some SHC parameters\n",
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/server.conf <<end
  [shclustering]
  pass4SymmKey = $SYMMKEY
  shcluster_label = SplunkSHC
end

  # Forward to indexer cluster using indexer discovery\n",
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/outputs.conf <<end
  # Turn off indexing on the search head
  [indexAndForward]
  index = false

  [tcpout]
  defaultGroup = indexer_cluster_peers
  forwardedindex.filter.disable = true
  indexAndForward = false

  [tcpout:indexer_cluster_peers]
  indexerDiscovery = cluster_master

  [indexer_discovery:cluster_master]
  pass4SymmKey = $SYMMKEY

  master_uri = https://$CM_PRIVATEIP:8089
end

  # update permissions
  chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps/base-autogenerated

  # Add base config for search head cluster members
  mkdir -p $SPLUNK_HOME/etc/shcluster/apps/member-base-autogenerated/local
  cat >>$SPLUNK_HOME/etc/shcluster/apps/member-base-autogenerated/local/outputs.conf <<end
  # Turn off indexing on the search head
  [indexAndForward]
  index = false

  [tcpout]
  defaultGroup = indexer_cluster_peers
  forwardedindex.filter.disable = true
  indexAndForward = false

  [tcpout:indexer_cluster_peers]
  indexerDiscovery = cluster_master

  [indexer_discovery:cluster_master]
  pass4SymmKey = $SYMMKEY

  master_uri = $CM_PRIVATE_IP:8089
end

# install search head apps, if appropriate
  if [ $INSTALL_SH_APPS = 1 ];
  then
    for i in ${!USER_APPS[*]}
    do
      echo "Downloading app ${user_apps[$i]}"
      if wget --tries=3 ${user_apps[$i]} -O /tmp/app${i}.spl
      then
        echo "Installing app..."
        tar -xvzf /tmp/app${i}.spl -C $SPLUNK_HOME/etc/apps/
        if [ $? -ne 0 ]; then
          echo "Extracting tarball failed"
        fi
        rm /tmp/app${i}.spl
      else
        echo "Downloading tarball failed"
      fi
    done
    #- set ownership
    chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps
  fi

  $SPLUNK_BIN start
  sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave \
  -master_uri https://$CM_PRIVATE_IP:8089 -auth admin:$ADMIN_PASSWORD

  sudo -u $SPLUNK_USER $SPLUNK_BIN apply shcluster-bundle -action stage --answer-yes
  $SPLUNK_BIN restart

  restart_signal




}

## splunk single search head
function splunk_single_sh
{
  # sleep 20 seconds to make sure Splunk has restarted before applying the configuration
  echo "#### sleeping"
  sleep 20

  export RESOURCE="SplunkSearchHeadInstance"
  # add hostname to /etc/hosts and set hostname
  printf "$LOCALIP \t splunksearch\n" >> /etc/hosts
  hostname splunksearch

  # stop splunk to make changes to search head configs
  #/bin/systemctl stop Splunkd

  # Increase splunkweb connection timeout with splunkd
  mkdir -p $SPLUNK_HOME/etc/apps/base-autogenerated/local
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/web.conf <<end
  [settings]
  splunkdConnectionTimeout = 300
end


  # Forward to indexer cluster using indexer discovery
  cat >>$SPLUNK_HOME/etc/apps/base-autogenerated/local/outputs.conf <<end
  # Turn off indexing on the search head
  [indexAndForward]
  index = false

  [tcpout]
  defaultGroup = indexer_cluster_peers
  forwardedindex.filter.disable = true
  indexAndForward = false
  [tcpout:indexer_cluster_peers]
  indexerDiscovery = cluster_master
  [indexer_discovery:cluster_master]
  pass4SymmKey = $SYMMKEY
  master_uri = https://$CM_PRIVATEIP:8089
end

  # update permissions
  chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps/base-autogenerated

  printf "#### license setup\t " && date

  # setup license server communication
  sudo -u $SPLUNK_USER $SPLUNK_BIN edit licenser-localslave -master_uri https://$CM_PRIVATEIP:8089 -auth admin:$ADMIN_PASSWORD

  printf "#### clustering setup\t " && date

  # configure communication to the splunk indexer cluster
  sudo -u $SPLUNK_USER $SPLUNK_BIN edit cluster-config -secret $SPLUNK_CLUSTER_SECRET \
  -mode searchhead -site site1 -master_uri https://$CM_PRIVATEIP:8089 -auth admin:$ADMIN_PASSWORD

  # install search head apps, if appropriate
  if [ $INSTALL_SH_APPS = 1 ];
  then
    for i in ${!USER_APPS[*]}
    do
      echo "Downloading app ${user_apps[$i]}"
      if wget --tries=3 ${user_apps[$i]} -O /tmp/app${i}.spl
      then
        echo "Installing app..."
        tar -xvzf /tmp/app${i}.spl -C $SPLUNK_HOME/etc/apps/
        if [ $? -ne 0 ]; then
          echo "Extracting tarball failed"
        fi
        rm /tmp/app${i}.spl
      else
        echo "Downloading tarball failed"
      fi
    done
    #- set ownership
    chown -R $SPLUNK_USER:$SPLUNK_USER $SPLUNK_HOME/etc/apps
  fi

  # final restart and cfn signal
  restart_signal
}




case "$1" in
  "single_sh")
  splunk_single_sh
  ;;
  "cluster_sh")
  splunk_cluster_sh
  ;;
  "indexer")
  splunk_indexer
  ;;
  "cm")
  splunk_cm
  ;;
  "deployer")
  splunk_deployer
  ;;
  *)
  echo "Usage: $basename [single_sh|cluster_sh|indexer|cm|deployer]";
  exit 0
esac

